From edb7149aa2cfa0c5f715ff485a496d90ba521cbc Mon Sep 17 00:00:00 2001
From: kueken <ohnemailadresse@arcor.de>
Date: Fri, 2 Jun 2023 01:25:25 +0200
Subject: [PATCH] kodi-old-gl-headers

---
 .../VideoRenderers/VideoShaders/VideoFilterShaderGLES.cpp | 5 +++++
 xbmc/utils/EGLUtils.cpp                                   | 8 ++++++++
 xbmc/utils/GLUtils.cpp                                    | 6 +++---
 3 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.cpp
index 4f6ffc0061..55c46b9b0f 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/VideoShaders/VideoFilterShaderGLES.cpp
@@ -89,6 +89,10 @@ ConvolutionFilterShader::ConvolutionFilterShader(ESCALINGMETHOD method)
     shadername = "gles_convolution-6x6.frag";
   }
 
+/*XCORE stb has an old gl2ext.h without GL_RGBA16F_EXT */
+#if defined (TARGET_STB)
+  m_internalformat = GL_RGBA;
+#else
   if (m_floattex)
   {
     m_internalformat = GL_RGBA16F_EXT;
@@ -98,6 +102,7 @@ ConvolutionFilterShader::ConvolutionFilterShader(ESCALINGMETHOD method)
   {
     m_internalformat = GL_RGBA;
   }
+#endif
 
   CLog::Log(LOGDEBUG, "GLES: using scaling method: {}", m_method);
   CLog::Log(LOGDEBUG, "GLES: using shader: {}", shadername);
diff --git a/xbmc/utils/EGLUtils.cpp b/xbmc/utils/EGLUtils.cpp
index 23dda990d6..e485c0201a 100644
--- a/xbmc/utils/EGLUtils.cpp
+++ b/xbmc/utils/EGLUtils.cpp
@@ -100,15 +100,18 @@ std::map<EGLenum, const char*> eglErrors =
 
 std::map<EGLint, const char*> eglErrorType =
 {
+#if !defined(TARGET_STB)
   X(EGL_DEBUG_MSG_CRITICAL_KHR),
   X(EGL_DEBUG_MSG_ERROR_KHR),
   X(EGL_DEBUG_MSG_WARN_KHR),
   X(EGL_DEBUG_MSG_INFO_KHR),
+#endif
 };
 #undef X
 
 } // namespace
 
+#if !defined(TARGET_STB)
 void EglErrorCallback(EGLenum error,
                       const char* command,
                       EGLint messageType,
@@ -133,6 +136,7 @@ void EglErrorCallback(EGLenum error,
 
   CLog::Log(LOGDEBUG, "EGL Debugging:\nError: {}\nCommand: {}\nType: {}\nMessage: {}", errorStr, command, typeStr, message);
 }
+#endif
 
 std::set<std::string> CEGLUtils::GetClientExtensions()
 {
@@ -187,6 +191,7 @@ void CEGLUtils::Log(int logLevel, const std::string& what)
 CEGLContextUtils::CEGLContextUtils(EGLenum platform, std::string const& platformExtension)
 : m_platform{platform}
 {
+#if !defined(TARGET_STB)
   if (CEGLUtils::HasClientExtension("EGL_KHR_debug"))
   {
     auto eglDebugMessageControl = CEGLUtils::GetRequiredProcAddress<PFNEGLDEBUGMESSAGECONTROLKHRPROC>("eglDebugMessageControlKHR");
@@ -199,6 +204,7 @@ CEGLContextUtils::CEGLContextUtils(EGLenum platform, std::string const& platform
 
     eglDebugMessageControl(EglErrorCallback, eglDebugAttribs);
   }
+#endif
 
   m_platformSupported = CEGLUtils::HasClientExtension("EGL_EXT_platform_base") && CEGLUtils::HasClientExtension(platformExtension);
 }
@@ -416,11 +422,13 @@ bool CEGLContextUtils::CreateContext(CEGLAttributesVec contextAttribs)
   if (CEGLUtils::HasExtension(m_eglDisplay, "EGL_IMG_context_priority"))
     contextAttribs.Add({{EGL_CONTEXT_PRIORITY_LEVEL_IMG, EGL_CONTEXT_PRIORITY_HIGH_IMG}});
 
+#if !defined(TARGET_STB)
   if (CEGLUtils::HasExtension(m_eglDisplay, "EGL_KHR_create_context") &&
       CServiceBroker::GetSettingsComponent()->GetAdvancedSettings()->m_openGlDebugging)
   {
     contextAttribs.Add({{EGL_CONTEXT_FLAGS_KHR, EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR}});
   }
+#endif
 
   m_eglContext = eglCreateContext(m_eglDisplay, eglConfig,
                                   EGL_NO_CONTEXT, contextAttribs.Get());
diff --git a/xbmc/utils/GLUtils.cpp b/xbmc/utils/GLUtils.cpp
index df8921e2b0..d1267c2de5 100644
--- a/xbmc/utils/GLUtils.cpp
+++ b/xbmc/utils/GLUtils.cpp
@@ -41,7 +41,7 @@ std::map<GLenum, const char*> glErrors =
 };
 
 std::map<GLenum, const char*> glErrorSource = {
-#if defined(HAS_GLES) && defined(TARGET_LINUX)
+#if defined(HAS_GLES) && defined(TARGET_LINUX)  && !defined(TARGET_STB)
     X(GL_DEBUG_SOURCE_API_KHR),
     X(GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR),
     X(GL_DEBUG_SOURCE_SHADER_COMPILER_KHR),
@@ -52,7 +52,7 @@ std::map<GLenum, const char*> glErrorSource = {
 };
 
 std::map<GLenum, const char*> glErrorType = {
-#if defined(HAS_GLES) && defined(TARGET_LINUX)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_STB)
     X(GL_DEBUG_TYPE_ERROR_KHR),
     X(GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR),
     X(GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR),
@@ -64,7 +64,7 @@ std::map<GLenum, const char*> glErrorType = {
 };
 
 std::map<GLenum, const char*> glErrorSeverity = {
-#if defined(HAS_GLES) && defined(TARGET_LINUX)
+#if defined(HAS_GLES) && defined(TARGET_LINUX) && !defined(TARGET_STB)
     X(GL_DEBUG_SEVERITY_HIGH_KHR),
     X(GL_DEBUG_SEVERITY_MEDIUM_KHR),
     X(GL_DEBUG_SEVERITY_LOW_KHR),
-- 
2.34.1

