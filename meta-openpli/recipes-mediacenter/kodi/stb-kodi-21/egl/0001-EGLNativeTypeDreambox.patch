From e9ce6f716d6e69089d24f79167b03b3fe7504fb1 Mon Sep 17 00:00:00 2001
From: kueken <ohnemailadresse@arcor.de>
Date: Thu, 27 Jan 2022 10:41:30 +0100
Subject: [PATCH] EGLNativeTypeSTB

---
 xbmc/windowing/egl/EGLNativeTypeSTB.cpp | 196 +++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeSTB.h   |  61 ++++++
 2 files changed, 257 insertions(+)
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeSTB.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeSTB.h

diff --git a/xbmc/windowing/egl/EGLNativeTypeSTB.cpp b/xbmc/windowing/egl/EGLNativeTypeSTB.cpp
new file mode 100644
index 0000000000..3ae4254c04
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeSTB.cpp
@@ -0,0 +1,196 @@
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeTypeSTB.h"
+#include "guilib/gui3d.h"
+#include "utils/DreamboxUtils.h"
+#include "utils/StringUtils.h"
+#include "platform/linux/SysfsPath.h"
+
+#include <dlfcn.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <linux/fb.h>
+#include <sys/ioctl.h>
+#include "system_egl.h"
+
+CEGLNativeTypeSTB::CEGLNativeTypeSTB()
+{
+  m_nativeWindow = (XBNativeWindowType)0L;
+}
+
+CEGLNativeTypeSTB::~CEGLNativeTypeSTB()
+{
+}
+
+bool CEGLNativeTypeSTB::CheckCompatibility()
+{
+  CSysfsPath model{"/proc/stb/info/model"};
+  name = model.Get<std::string>();
+  return name == "dm820" || name == "dm900" || name == "dm920" || name == "dm7080";
+}
+
+void CEGLNativeTypeSTB::Initialize()
+{
+}
+
+void CEGLNativeTypeSTB::Destroy()
+{
+}
+
+bool CEGLNativeTypeSTB::CreateNativeDisplay()
+{
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::CreateNativeWindow()
+{
+  RESOLUTION_INFO res;
+  if (GetNativeResolution(&res))
+    SetFramebufferResolution(res.iWidth, res.iHeight);
+  else
+    SetFramebufferResolution(1280, 720);
+  return true;
+}
+
+bool CEGLNativeTypeSTB::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  if (!nativeDisplay)
+    return false;
+  *nativeDisplay = (XBNativeDisplayType *)&m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  if (!nativeWindow)
+    return false;
+  *nativeWindow = (XBNativeWindowType *)&m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::DestroyNativeDisplay()
+{
+  return true;
+}
+
+bool CEGLNativeTypeSTB::DestroyNativeWindow()
+{
+  return true;
+}
+
+bool CEGLNativeTypeSTB::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  std::string mode;
+  CSysfsPath videomode{"/proc/stb/video/videomode"};
+  mode = videomode.Get<std::string>();
+  return dreambox_mode_to_resolution(mode.c_str(), res);
+}
+
+bool CEGLNativeTypeSTB::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  // Don't set the same mode as current
+  std::string mode;
+  CSysfsPath videomode{"/proc/stb/video/videomode"};
+  mode = videomode.Get<std::string>();
+  if (res.strId == mode)
+    return false;
+
+  return SetDisplayResolution(res.strId.c_str());
+}
+
+bool CEGLNativeTypeSTB::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  std::string valstr;
+  CSysfsPath videomode_choices{"/proc/stb/video/videomode_choices"};
+  valstr = videomode_choices.Get<std::string>();
+  std::vector<std::string> probe_str = StringUtils::Split(valstr, " ");
+
+  resolutions.clear();
+  RESOLUTION_INFO res;
+  for (std::vector<std::string>::const_iterator i = probe_str.begin(); i != probe_str.end(); ++i)
+  {
+    if (dreambox_mode_to_resolution(i->c_str(), &res))
+      resolutions.push_back(res);
+  }
+
+  return resolutions.size() > 0;
+}
+
+bool CEGLNativeTypeSTB::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  // check display/mode, it gets defaulted at boot
+  if (!GetNativeResolution(res))
+  {
+    // punt to 720p if we get nothing
+    dreambox_mode_to_resolution("720p", res);
+  }
+
+  return true;
+}
+
+bool CEGLNativeTypeSTB::ShowWindow(bool show)
+{
+  SysfsUtils::SetInt("/proc/stb/video/alpha", show ? 255 : 0);
+  return true;
+}
+
+bool CEGLNativeTypeSTB::SetDisplayResolution(const char *mode)
+{
+  // switch display resolution
+  CSysfsPath videomode{"/proc/stb/video/videomode"};
+  mode = videomode.Get<std::string>();
+
+  RESOLUTION_INFO res;
+  dreambox_mode_to_resolution(mode, &res);
+  SetFramebufferResolution(res);
+
+  return true;
+}
+
+void CEGLNativeTypeSTB::SetFramebufferResolution(const RESOLUTION_INFO &res) const
+{
+  SetFramebufferResolution(res.iScreenWidth, res.iScreenHeight);
+}
+
+void CEGLNativeTypeSTB::SetFramebufferResolution(int width, int height) const
+{
+  const char fbdev[] = "/dev/fb0";
+  int fd;
+
+  fd = open(fbdev, O_RDWR | O_CLOEXEC);
+  if (fd >= 0)
+  {
+    struct fb_var_screeninfo vinfo;
+    if (ioctl(fd, FBIOGET_VSCREENINFO, &vinfo) == 0)
+    {
+      vinfo.xres = width;
+      vinfo.yres = height;
+      vinfo.xres_virtual = width;
+      vinfo.yres_virtual = height * 2;
+      vinfo.bits_per_pixel = 32;
+      vinfo.activate = FB_ACTIVATE_ALL;
+      ioctl(fd, FBIOPUT_VSCREENINFO, &vinfo);
+    }
+    close(fd);
+  }
+}
+
diff --git a/xbmc/windowing/egl/EGLNativeTypeSTB.h b/xbmc/windowing/egl/EGLNativeTypeSTB.h
new file mode 100644
index 0000000000..eb032063e7
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeSTB.h
@@ -0,0 +1,61 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <string>
+#include <vector>
+
+#include "EGLNativeType.h"
+class CEGLNativeTypeSTB : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeSTB();
+  virtual ~CEGLNativeTypeSTB();
+  virtual std::string GetNativeName() const { return "dreambox"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+
+protected:
+  bool SetDisplayResolution(const char *resolution);
+  void SetupVideoScaling(const char *mode);
+  void DisableFreeScale();
+
+private:
+  void SetFramebufferResolution(const RESOLUTION_INFO &res) const;
+  void SetFramebufferResolution(int width, int height) const;
+};
-- 
2.25.1

